// <auto-generated />
using System;
using DatabaseAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fias.Migrations
{
    [DbContext(typeof(FiasDatabaseContext))]
    partial class FiasDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DatabaseAPI.Models.AddressObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ActualStatus");

                    b.Property<string>("AreaCode");

                    b.Property<string>("AutoCode");

                    b.Property<int?>("CentStatus");

                    b.Property<string>("CityCode");

                    b.Property<string>("Code");

                    b.Property<string>("CtarCode");

                    b.Property<int?>("CurrStatus");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("FormalName");

                    b.Property<Guid>("GUID");

                    b.Property<string>("IFNSFL");

                    b.Property<string>("IFNSUL");

                    b.Property<int?>("Level");

                    b.Property<int?>("LiveStatus");

                    b.Property<string>("OKATO");

                    b.Property<string>("OKTMO");

                    b.Property<string>("OfficialName");

                    b.Property<int?>("OperStatus");

                    b.Property<Guid?>("ParentGUID");

                    b.Property<string>("PlaceCode");

                    b.Property<string>("PlainCode");

                    b.Property<string>("PlanCode");

                    b.Property<string>("PostalCode");

                    b.Property<string>("RegionCode");

                    b.Property<string>("ShortName");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("StreetCode");

                    b.Property<string>("TERRIFNSFL");

                    b.Property<string>("TERRIFNSUL");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("AddressObjects");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Developer", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("image");

                    b.Property<DateTimeOffset?>("BirthDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsBackendDeveloper")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("timestamp");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("money");

                    b.Property<int?>("TeamLeadId");

                    b.Property<int?>("TeamMateId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<TimeSpan?>("WakeTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("TeamLeadId");

                    b.HasIndex("TeamMateId");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("DatabaseAPI.Models.House", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressObjectId");

                    b.Property<string>("BuildingNumber");

                    b.Property<string>("CadNumber");

                    b.Property<int?>("Counter");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int?>("EstStatus");

                    b.Property<Guid>("GUID");

                    b.Property<string>("HouseNumber");

                    b.Property<string>("IFNSFL");

                    b.Property<string>("IFNSUL");

                    b.Property<string>("OKATO");

                    b.Property<string>("OKTMO");

                    b.Property<string>("PostalCode");

                    b.Property<string>("RegionCode");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int?>("StatStatus");

                    b.Property<int?>("StrStatus");

                    b.Property<string>("StructureNumber");

                    b.Property<string>("TERRIFNSFL");

                    b.Property<string>("TERRIFNSUL");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DatabaseAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Developer", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Developer", "TeamLead")
                        .WithMany()
                        .HasForeignKey("TeamLeadId");

                    b.HasOne("DatabaseAPI.Models.Developer")
                        .WithMany("TeamMates")
                        .HasForeignKey("TeamMateId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DatabaseAPI.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DatabaseAPI.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DatabaseAPI.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DatabaseAPI.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
